@using BlazorMovie.Models

@inject ISearchService searchService
@inject NavigationManager NavManager


<div class="row">
    <div class="col-12 d-flex justify-content-end">
        @if (string.IsNullOrWhiteSpace(searchModel.Category))
        {
            <select @bind="searchModel.Category" class="form-select">
                <option value="">Select Category</option>
                <option value="Movie">Movie By Title</option>
                <option value="PopularMovies">Popular Movies</option>
                <option value="TopRated">Top Rated</option>
                <option value="Upcoming">Upcoming</option>
                <option value="NowPlaying">Now Playing</option>
            </select>

        }
        else 
        {
            <div class="input-group">
                <select @bind="searchModel.Category" class="form-select">
                    <option value="">Select Category</option>
                    <option value="Movie">Movie By Title</option>
                    <option value="PopularMovies">Popular Movies</option>
                    <option value="TopRated">Top Rated</option>
                    <option value="Upcoming">Upcoming</option>
                    <option value="NowPlaying">Now Playing</option>
                </select>
                <input type="text" class="form-control" placeholder="Enter search term..." @bind="searchTerm">
                <button class="btn btn-primary" type="submit" @onclick="PerformSearch">Search</button>
            </div>
        }

    </div>

</div>
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private bool showSearchBox = false;
    private string selectedCategory = string.Empty;
    private string searchTerm = string.Empty;
    private IEnumerable<SearchModel> searchResults = [];
    private string errorMessage = string.Empty;


    private SearchModel? Category { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<SearchModel>> OnMultipleResultsFound { get; set; }

    private SearchModel searchModel { get; set; } = new SearchModel();

    public NavigationManager NavigationManager { get; set; } = null!;

    private void OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? "";
        showSearchBox = !string.IsNullOrWhiteSpace(selectedCategory);
    }

    private async Task PerformSearch()
    {  //intended flow: if response returns more than one result, show modal with result options
        searchResults = await searchService.GetSearchModelAsync(selectedCategory, searchTerm);

        if (searchResults != null && searchResults.Count() >= 2)
        {
            await OnMultipleResultsFound.InvokeAsync(searchResults);
        }
        else if (searchResults != null && searchResults.Any())
        {
            var singleResult = searchResults.First();

            if (singleResult.MovieDetails != null)
            {
                OnMovieSelected(singleResult.MovieDetails);
            }
            else
            {
                //show error message to user indicating movie details not available
                errorMessage = "Movie details are not available.";

            }
        }

    }
    private void OnMovieSelected(MovieDetails movieDetails)
    {
        if (movieDetails is not null)
        {
            NavigationManager.NavigateTo($"/movie/{movieDetails.Id}");

        }
        else
        {
            //show error message to user indicating movie details not available
            errorMessage = "Movie details are not available.";

        }

    }
}
