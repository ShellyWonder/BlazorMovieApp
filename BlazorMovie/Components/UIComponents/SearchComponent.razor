@using BlazorMovie.Models

@inject ISearchService searchService
@inject NavigationManager NavManager


<div class="row">
    <div class="col-12 d-flex justify-content-end">
        @if (string.IsNullOrWhiteSpace(searchModel.Category))
        {
            <select @bind="searchModel.Category" class="form-select">
                <option value="">Select Category</option>
                <option value="MovieByTitle">Movie By Title</option>
                <option value="PopularMovies">Popular Movies</option>
                <option value="TopRated">Top Rated</option>
                <option value="Upcoming">Upcoming</option>
                <option value="NowPlaying">Now Playing</option>
            </select>

        }
        else 
        {
            <div class="input-group">
                <select @bind="searchModel.Category" class="form-select">
                    <option value="">Select Category</option>
                    <option value="MovieByTitle">Movie By Title</option>
                    <option value="PopularMovies">Popular Movies</option>
                    <option value="TopRated">Top Rated</option>
                    <option value="Upcoming">Upcoming</option>
                    <option value="NowPlaying">Now Playing</option>
                </select>
                <input type="text" class="form-control" placeholder="@Placeholder" @bind="searchTerm"
                @onkeyup="HandleKeyUp"/>
                <button class="btn btn-primary" type="submit" @onclick="PerformSearch">Search</button>
                @if (IsSearchActive)
                {
                    <button class="btn btn-danger border border-2" @onclick="OnClearSearchClick">Clear Search</button>
                }

            </div>
        }

    </div>

</div>
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private bool showSearchBox = false;
    private string searchTerm = string.Empty;
    private IEnumerable<SearchModel> searchResults = [];
    private string errorMessage = string.Empty;

    private SearchModel? Category { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = "Enter Search Term";
    

    [Parameter]
    public bool IsSearchActive { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<SearchModel>> OnMultipleResultsFound { get; set; }

    [Parameter]
    public EventCallback OnClearSearch { get; set; }

    private SearchModel searchModel { get; set; } = new SearchModel();

    public NavigationManager NavigationManager { get; set; } = null!;


    private void OnCategoryChanged(ChangeEventArgs e)
    {
        searchModel.Category = e.Value?.ToString() ?? string.Empty;
        showSearchBox = !string.IsNullOrWhiteSpace(searchModel.Category);
        Console.WriteLine($"Category changed to: {searchModel.Category}, ShowSearchBox: {showSearchBox}");

    }

    private async Task PerformSearch()
    {
        if (!ValidateSearchTerm())
            return;

        await FetchSearchResults();

        if (searchResults == null || !searchResults.Any())
        {
            ShowErrorMessage("No results found.");
            return;
        }

        if (searchResults.Count() > 1)
        {
            await HandleMultipleResults();
        }
        else
        {
            HandleSingleResult(searchResults.First());
        }
        IsSearchActive = true;
    }
    private async Task FetchSearchResults()
    {
        try
        {
            Console.WriteLine($"Category: {searchModel.Category}, SearchTerm: {searchTerm}");
            searchResults = await searchService.GetSearchModelAsync(searchModel.Category, searchTerm);
            Console.WriteLine($"Search Results Count: {searchResults?.Count()}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching search results: {ex.Message}");
            ShowErrorMessage("An error occurred while fetching search results.");
        }
    }

    #region HANDLE KEY UP
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PerformSearch(); // Trigger the search on Enter key press
        }
    }
#endregion

    private async Task OnClearSearchClick()
    {
        IsSearchActive = false;
        searchTerm = string.Empty; // Clear text input
        searchModel.Category = string.Empty; // Reset dropdown
        OnCategoryChanged(new ChangeEventArgs { Value = string.Empty }); // Trigger the category change logic
        searchResults = Enumerable.Empty<SearchModel>(); // Clear results
        await OnClearSearch.InvokeAsync(); // Trigger parent callback (if any)
        StateHasChanged(); // Update the UI
    }

#region VALIDATE SEARCH
    private bool ValidateSearchTerm()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            ShowErrorMessage("Please enter a search term.");
            return false;
        }
        return true;
    }
    #endregion

    #region SHOW ERROR MESSAGE
    private async void ShowErrorMessage(string message)
    {
        errorMessage = message;
        StateHasChanged(); // Update the UI to show the error message

        // Wait for 2.5 seconds before clearing the error message
        await Task.Delay(2500);

        errorMessage = string.Empty; // Clear the error message
        StateHasChanged(); // Update the UI to hide the error message
    }
    #endregion

#region RESULTS HANDLING

    #region HANDLE MULTIPLE SEARCH RESULTS
    private async Task HandleMultipleResults()
    //intended flow: if response returns more than one result, show modal with result options
    {
        await OnMultipleResultsFound.InvokeAsync(searchResults);
    }
    #endregion

    #region HANDLE ONE RESULT
    private void HandleSingleResult(SearchModel singleResult)
    {
        if (singleResult.MovieDetails != null)
        {
            OnMovieSelected(singleResult.MovieDetails);
        }
        else
        {
            ShowErrorMessage("Movie details are not available.");
        }
    }
    #endregion

    #region RESULT ROUTING
        private void OnMovieSelected(MovieDetails movieDetails)
        {
            if (movieDetails is not null)
            {
                NavigationManager.NavigateTo($"/movie/{movieDetails.Id}");
            }
            else
            {
                errorMessage = "Movie details are not available.";
            }
        }
    #endregion
#endregion
}
