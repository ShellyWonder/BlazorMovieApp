@* PersonSearchResultsComponent modal *@
@using BlazorMovie.Components.UIComponents.CreditComponents
@using BlazorMovie.Models.Credits
@using BlazorMovie.Models.Interfaces
@using BlazorMovie.Models.Search

@inject NavigationManager _navManager

<div class="@ModalCssClass"
     style="@ModalStyle"
        id="personSearchResultsModal" 
        tabindex="-1"
        aria-labelledby="personSearchResultsModalLabel" aria-hidden="@(!IsOpen).ToString()"
        role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (SearchPersonResults?.Results is not null && SearchPersonResults.Results.Any())
                {
                    @foreach (var person in SearchPersonResults.Results)
                    {
                        <PersonCardComponent Person="person" 
                                             SubText="@GetPopularityRating(person)" 
                                             OnMoreDetailsRequested="HandleChildMoreDetailsRequested"/>
                    }
                }
                else
                {
                    <p>No matching people found.</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    #region PARAMETERS
    [Parameter]
    public PageResponse<PersonSearchResult>? SearchPersonResults { get; set; }

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback OnCloseModal { get; set; }

    [Parameter]
    public EventCallback<int> OnMoreDetailsRequested { get; set; }

    [Parameter]
    public string SubText { get; set; } = string.Empty;
    #endregion

    private string person { get; set; } = string.Empty;

    private string ModalCssClass => IsOpen ? "modal fade show" : "modal fade";
    private string ModalStyle => IsOpen ? "display: block; padding-right: 17px;" : "display: none;";

    private async Task HandleChildMoreDetailsRequested(int personId) => await OnMoreDetailsRequested.InvokeAsync(personId);
    

    //return the conversion of  float popularity  to string SubText
    private string GetPopularityRating(PersonSearchResult? person)
    => person?.Popularity.ToString("0.0") ?? "N/A";


    private IEnumerable<PersonSearchResult> PersonResults =>
       SearchPersonResults?.Results ?? Enumerable.Empty<PersonSearchResult>();
    

    private void ViewPersonDetails(int id) => _navManager.NavigateTo($"/persondetails/{id}");
    private void CloseModal() => OnCloseModal.InvokeAsync();
    
}
