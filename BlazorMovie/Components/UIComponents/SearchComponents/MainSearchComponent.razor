@using BlazorMovie.Services.Interfaces
@using BlazorMovie.Models
@inject ISearchService searchService
@inject NavigationManager NavManager


<div class="row">
    <div class="col-12 d-flex justify-content-end">

        <div class="input-group">
            <DropdownComponent @ref="dropdownComponent" OnCategorySelected="HandleCategorySelected" />
            @if (showSearchBox)
            {
                <input type="text" class="form-control" placeholder="@Placeholder" @bind="searchModel.Query"  @onkeyup="HandleKeyUp" />
                <button class="btn btn-primary" type="submit" @onclick="SearchMoviesByTitle">Search</button>
                <button class="btn btn-danger border border-2" @onclick="OnClearSearchClick">Clear Search</button>
            }

        </div>

    </div>

</div>
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    #region PARAMETERS
    [Parameter]
    public string Placeholder { get; set; } = "Enter Search Term";

    [Parameter]
    public bool IsSearchActive { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<SearchModel>> OnMultipleResultsFound { get; set; }

    [Parameter]
    public EventCallback OnClearSearch { get; set; }
    #endregion

    private bool showSearchBox = false;
    private string searchTerm = string.Empty;
    private int page { get; set; } = 1;
    private IEnumerable<SearchModel> searchResults = [];
    private string errorMessage = string.Empty;
    private DropdownComponent? dropdownComponent;
    private SearchModel? Category { get; set; }
    private SearchModel? Query { get; set; }
    private SearchModel searchModel { get; set; } = new SearchModel();
    public NavigationManager NavigationManager { get; set; } = null!;

    #region CATEGORY CHANGED
    private void OnCategoryChanged(ChangeEventArgs e)
    {
        searchModel.Category = e.Value?.ToString() ?? string.Empty;
        showSearchBox = searchModel.Category == "MovieByTitle"; // Show input box only for MovieByTitle

        if (!showSearchBox && !string.IsNullOrWhiteSpace(searchModel.Category))
        {
            NavigateToCategory(searchModel.Category); // Navigate to the appropriate route
        }
        //update UI
        StateHasChanged();
    }
    #endregion

    #region PERFORM SEARCH
    private async Task PerformSearch()
    {
        if (!await ValidateSearchTerm())
            return;

        await FetchSearchResults();

        if (searchResults == null || !searchResults.Any())
        {
            await ShowErrorMessage("No results found.");
            return;
        }

        if (searchResults.Count() > 1)
        {
            await HandleMultipleResults();
        }
        else
        {
            HandleSingleResult(searchResults.First());
        }
        IsSearchActive = true;
    }
    #endregion

    #region FETCH SEARCH RESULTS
    private async Task FetchSearchResults()
    {
        try
        {
            Console.WriteLine($"Category: {searchModel.Category}, SearchTerm: {searchTerm}");
            searchResults = await searchService.GetSearchModelAsync(searchModel.Category, searchTerm);
            Console.WriteLine($"Search Results Count: {searchResults?.Count()}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching search results: {ex.Message}");
            await ShowErrorMessage("An error occurred while fetching search results.");
        }
    }
    #endregion

    #region HANDLE CATEGORY SELECTED
    private void HandleCategorySelected(string selectedCategory)
    {
        searchModel.Category = selectedCategory;
        showSearchBox = selectedCategory == "MovieByTitle";

        if (!showSearchBox && !string.IsNullOrWhiteSpace(selectedCategory))
        {
            NavigateToCategory(selectedCategory); // Your existing navigation logic
        }

        StateHasChanged(); // Update the UI
    }
    #endregion

    #region NAVIGATE TO CATEGORY PAGE
    private void NavigateToCategory(string category)
    {
        // Null or empty category check
        if (string.IsNullOrWhiteSpace(category))
            {
                Console.WriteLine("Invalid category provided for navigation.");
                return; // Exit the method if category is null or empty
            }
       
            // Map category to route
            var route = category switch
            {
                "PopularMovies" => "/",
                "TopRated" => "/top_rated",
                "Upcoming" => "/upcoming",
                "NowPlaying" => "/now_playing",
                _ => "/"
            };

            NavManager.NavigateTo(route);
        // Reset dropdown after navigating
        dropdownComponent?.ResetDropdown();
    }
    #endregion

    #region SEARCH BY TITLE
    private async Task SearchMoviesByTitle()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(searchModel.Query))
            {
                searchResults = await searchService.GetSearchModelAsync(searchModel.Category, searchTerm);
                // Reset dropdown after searching
                dropdownComponent?.ResetDropdown();
            }
            else
            {
                errorMessage = "Please enter a movie title to search.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while searching for movies: {ex.Message}";
        }

    }
    #endregion

#region HANDLE KEY UP
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PerformSearch(); // Trigger the search on Enter key press
        }
    }
#endregion

#region CLEAR SEARCH
    private async Task OnClearSearchClick()
    {
        IsSearchActive = false;
        searchTerm = string.Empty; // Clear text input
        searchModel.Category = string.Empty; // Reset dropdown
       OnCategoryChanged(new ChangeEventArgs { Value = string.Empty }); // Trigger the category change logic
        searchResults = Enumerable.Empty<SearchModel>(); // Clear results
        await OnClearSearch.InvokeAsync(); // Trigger parent callback (if any)
        StateHasChanged(); // Update the UI
    }
#endregion

#region VALIDATE SEARCH
    private async Task<bool> ValidateSearchTerm()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await ShowErrorMessage("Please enter a search term.");
            return false;
        }
        return true;
    }
    #endregion

 #region SHOW ERROR MESSAGE
    private async Task ShowErrorMessage(string message)
    {
        errorMessage = message;
        StateHasChanged(); // Update the UI to show the error message

        // Wait for 1.5 seconds before clearing the error message
        await Task.Delay(1500);

        errorMessage = string.Empty; // Clear the error message
        StateHasChanged(); // Update the UI to hide the error message
    }
    #endregion

#region RESULTS HANDLING

    #region HANDLE MULTIPLE SEARCH RESULTS
    private async Task HandleMultipleResults()
    //intended flow: if response returns more than one result, show modal with result options
    {
        await OnMultipleResultsFound.InvokeAsync(searchResults);
    }
    #endregion

    #region HANDLE ONE RESULT
    private async void HandleSingleResult(SearchModel singleResult)
    {
        if (singleResult.MovieDetails != null)
        {
            OnMovieSelected(singleResult.MovieDetails);
        }
        else
        {
            await ShowErrorMessage("Movie details are not available.");
        }
    }
    #endregion

    #region RESULT ROUTING
        private void OnMovieSelected(MovieDetails movieDetails)
        {
            if (movieDetails is not null)
            {
                NavigationManager.NavigateTo($"/movie/{movieDetails.Id}");
            }
            else
            {
                errorMessage = "Movie details are not available.";
            }
        }
    #endregion

     #endregion
}
