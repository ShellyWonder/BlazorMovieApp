@*MainSearchComponent(Parent)*@
@using System.Web
@using BlazorMovie.Components.UIComponents.UtilityComponents
@using BlazorMovie.Models
@using BlazorMovie.Models.Search
@using BlazorMovie.Services.Interfaces
@inject ISearchService searchService
@inject NavigationManager NavManager

<div class="row">
    <div class="col-12 d-flex justify-content-end">

        <div class="input-group">
            <DropdownComponent @ref="dropdownComponent" OnCategorySelected="HandleCategorySelected" />
            @if (showSearchBox)
            {
                <SearchBoxInputComponent @ref ="searchBox"
                                        Placeholder="@Placeholder"
                                         @bind-SearchQuery="searchQuery"
                                         OnSearch="PerformSearch"
                                         OnClearSearch="HandleClearSearch" />
            }
        </div>
    </div>
</div>

<ErrorMessageComponent Message="@errorMessage" />

@code {
    #region PARAMETERS
    [Parameter]
    public string Placeholder { get; set; } = "Enter Search Term";

    [Parameter]
    [SupplyParameterFromQuery]
    public string searchQuery { get; set; } = string.Empty;

    [Parameter]
    public bool IsSearchActive { get; set; }

    [Parameter]
    public EventCallback OnClearSearch { get; set; }
    #endregion

    private bool showSearchBox = false;
    private int page { get; set; } = 1;
    private string category { get; set; } = string.Empty;

    // individual "search by" properties:
    private PageResponse<Movie>? searchMovieResults;
    private PageResponse<PersonSearchResult>? searchPersonResults;

    private string errorMessage { get; set; } = string.Empty;
    private SearchBoxInputComponent? searchBox;
    private DropdownComponent? dropdownComponent;
    private SearchModel? Category { get; set; }
    private SearchModel? Query { get; set; }
    private SearchModel searchModel { get; set; } = new SearchModel();
    public NavigationManager NavigationManager { get; set; } = null!;

    #region CATEGORY CHANGED
    private void OnCategoryChanged(ChangeEventArgs e)
    {
        searchModel.Category = e.Value?.ToString() ?? string.Empty;
        showSearchBox = searchModel.Category == "MovieByTitle" 
                     || searchModel.Category == "PersonByName";

        if (!showSearchBox && !string.IsNullOrWhiteSpace(searchModel.Category))
        {
            NavigateToCategory(searchModel.Category); // Navigate to the appropriate route
        }
        //update UI
        StateHasChanged();
    }
    #endregion

    #region PERFORM SEARCH
    private async Task PerformSearch()
    {
        Console.WriteLine($"Parent searchQuery: {searchQuery}");
        if (!await ValidateSearchTerm())
            return;

        // Clear previous search results
        searchMovieResults = null;
        searchPersonResults = null;
        errorMessage = string.Empty;
        // Update UI to reflect clearing results
        StateHasChanged(); 

        await FetchSearchResults();

        // Now check if we got results
        if (category == "MovieByTitle")
        {
            if (searchMovieResults?.Results == null || !searchMovieResults.Results.Any())
            {
                errorMessage = "No results found.";
                return;
            }
        }
        else if (category == "PersonByName")
        {
            if (searchPersonResults?.Results == null || !searchPersonResults.Results.Any())
            {
                errorMessage = "No results found.";
                return;
            }
        }
        else
        {
            errorMessage = $"Unknown category '{category}'";
            return;
        }

        // Navigate to the search results page
        NavManager.NavigateTo($"/search_result?SearchQuery={HttpUtility.UrlEncode(searchQuery)}&Page={page}");

        IsSearchActive = true;
    }
    #endregion

    #region FETCH SEARCH RESULTS
    private async Task FetchSearchResults()
    {
        try
        {
            Console.WriteLine($"Fetching results for Category: {searchModel.Category}, SearchTerm: {searchQuery}");

            if (category == "MovieByTitle")
            {
                searchMovieResults = await searchService.GetMoviesAsync(page, searchQuery);
                Console.WriteLine($"Results fetched: {searchMovieResults?.Results?.Count ?? 0}");
            }
            else if (category == "PersonByName")
            {
                searchPersonResults = await searchService.GetPersonAsync(page, searchQuery);
                Console.WriteLine($"Results fetched: {searchPersonResults?.Results?.Count ?? 0}");
            }
           
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching search results: {ex.Message}");
            errorMessage = "An error occurred while fetching search results.";
            
        }
    }
    #endregion

    #region HANDLE CATEGORY SELECTED
    private void HandleCategorySelected(string selectedCategory)
    {
        searchModel.Category = selectedCategory;
        category = selectedCategory;
        showSearchBox = selectedCategory == "MovieByTitle"
                  || selectedCategory == "PersonByName";

        if (!showSearchBox && !string.IsNullOrWhiteSpace(selectedCategory))
        {
            NavigateToCategory(selectedCategory); // Your existing navigation logic
        }

        StateHasChanged(); // Update the UI
    }
    #endregion

    #region NAVIGATE TO CATEGORY PAGE
    private void NavigateToCategory(string category)
    {
        // Null or empty category check
        if (string.IsNullOrWhiteSpace(category))
        {
            Console.WriteLine("Invalid category provided for navigation.");
            return; // Exit the method if category is null or empty
        }

        // Map category to route
        var route = category switch
        {
            "PopularMovies" => "/",
            "TopRated" => "/top_rated",
            "Upcoming" => "/upcoming",
            "NowPlaying" => "/now_playing",
            "SearchResults" => "/search_result",
            _ => "/"
        };

        NavManager.NavigateTo(route);
        
    }
    #endregion

    #region VALIDATE SEARCH
    private async Task<bool> ValidateSearchTerm()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            errorMessage = "Please enter a search term.";
            StateHasChanged();
            await Task.Delay(1500);
            errorMessage = string.Empty;
            StateHasChanged();
            return false;
        }
        return true;
    }
    #endregion

    #region CLEAR SEARCH
    private void HandleClearSearch()
    {
        // Reset the searchQuery to an empty string
        searchQuery = string.Empty;

        // Hide the input group
        showSearchBox = false;

        // Reset the dropdown component to its default value
        dropdownComponent?.ResetDropdown();

        // Preserve the displayed search results
        Console.WriteLine("Search cleared. Input and dropdown reset, but results remain displayed.");
        StateHasChanged(); // Update UI
    }
    #endregion

}

    

   
