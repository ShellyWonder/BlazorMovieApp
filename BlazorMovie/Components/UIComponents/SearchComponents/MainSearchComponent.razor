@*MainSearchComponent(Parent)*@
@using System.Web
@using BlazorMovie.Components.UIComponents.UtilityComponents
@using BlazorMovie.Enums
@using BlazorMovie.Models
@using BlazorMovie.Models.Search
@using BlazorMovie.Services.Interfaces
@inject ISearchService searchService
@inject NavigationManager _navManager

<div class="row">
    <div class="col-12 d-flex justify-content-end">

        <div class="input-group">
            <DropdownComponent @ref="dropdownComponent" OnCategorySelected="HandleCategorySelected" />
            @if (showSearchBox)
            {
                <SearchBoxInputComponent @ref ="searchBox"
                Placeholder="@Placeholder"
                @bind-SearchQuery="searchQuery"
                OnSearch="PerformSearch"
                OnClearSearch="HandleClearSearch"/>
            }
        </div>
    </div>
</div>
@if (IsPersonModalOpen && (SearchPersonResults?.Results.Any() == true))
{
    <!-- Render the child modal  -->
    <PersonSearchResultsComponent SearchPersonResults="SearchPersonResults"
    IsOpen ="true"
    OnMoreDetailsRequested="HandleMoreDetailsRequested"
    OnCloseModal="ClosePersonModal" />
}

<ErrorMessageComponent Message="@errorMessage" />

@code {
    //NOTE: This component is the parent component for the SearchBoxInputComponent, 
    // DropdownComponent and PersonSearchResultsComponent(modal).
    //Code-behind/partial class utilized due to file size and complexity.
    #region PARAMETERS
    [Parameter]
    public string Placeholder { get; set; } = "Enter Search Term";

    [Parameter]
    [SupplyParameterFromQuery]
    public string searchQuery { get; set; } = string.Empty;

    [Parameter]
    public bool IsSearchActive { get; set; }

    [Parameter]
    public EventCallback OnClearSearch { get; set; }

    [Parameter]
    public EventCallback<int> OnMoreDetailsRequested { get; set; }
    #endregion

    #region PROPERTIES/VARIABLES
    private bool IsPersonModalOpen { get; set; } = false;
    private bool showSearchBox { get; set; } = false;
    private int page { get; set; } = 1;
    private SearchCategory category { get; set; } = SearchCategory.None;

    // individual "search by" properties:
    private PageResponse<Movie>? SearchMovieResults;
    private PageResponse<PersonSearchResult>? SearchPersonResults;

    private string errorMessage { get; set; } = string.Empty;
    private SearchBoxInputComponent? searchBox;
    private DropdownComponent? dropdownComponent;
    private SearchModel? Category { get; set; }
    private SearchModel? Query { get; set; }
    private SearchModel searchModel { get; set; } = new SearchModel();
    public NavigationManager NavigationManager { get; set; } = null!;
    #endregion

    #region PERFORM SEARCH
    private async Task PerformSearch()
    {
        Console.WriteLine($"Parent searchQuery: {searchQuery}");
        if (!await ValidateSearchTerm())
            return;

        // Clear previous search results
        SearchMovieResults = null;
        SearchPersonResults = null;
        errorMessage = string.Empty;
        // Update UI to reflect clearing results
        StateHasChanged(); 

        await FetchSearchResults();

        if (category == SearchCategory.MovieByTitle)
        {
            if (SearchMovieResults?.Results == null || !SearchMovieResults.Results.Any())
            {
                errorMessage = "No results found.";
                return;
            }
        }
        else if (category == SearchCategory.PersonByName)
        {
            if (SearchPersonResults?.Results == null || !SearchPersonResults.Results.Any())
            {
                errorMessage = "No results found.";
                return;
            }
        }
        else
        {
            errorMessage = $"Unknown category '{category}'";
            return;
        }

        // Navigate to the search results page
        _navManager.NavigateTo($"/search_result?SearchQuery={HttpUtility.UrlEncode(searchQuery)}&Page={page}");
        IsSearchActive = true;
    }
    #endregion

    #region FETCH SEARCH RESULTS
    private async Task FetchSearchResults()
    {
        try
        {
            Console.WriteLine($"Fetching results for Category: {searchModel.Category}, SearchTerm: {searchQuery}");

            if (category == SearchCategory.MovieByTitle)
            {
                SearchMovieResults = await searchService.GetMoviesAsync(page, searchQuery);
                Console.WriteLine($"Results fetched: {SearchMovieResults?.Results?.Count ?? 0}");
            }
            else if (category == SearchCategory.PersonByName)
            {
                SearchPersonResults = await searchService.GetPersonAsync(page, searchQuery);
                Console.WriteLine($"Results fetched: {SearchPersonResults?.Results?.Count ?? 0}");
                if (SearchPersonResults?.Results?.Any() == true) IsPersonModalOpen = true;
            }
           
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching search results: {ex.Message}");
            errorMessage = "An error occurred while fetching search results.";
            
        }
    }
    #endregion
 
}