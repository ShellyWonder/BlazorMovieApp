@*DropdownComponent*@
@using BlazorMovie.Enums

<div class="@animationClass">
    <select class="form-select dropdownSelect" @onchange="OnCategoryChanged" value="@SelectedCategory">
        <option value="@SearchCategory.None">Search</option>
        <option value="@SearchCategory.MovieByTitle">Movie By Title</option>
        <option value="@SearchCategory.PersonByName">Movies By Actor</option>
        <option value="@SearchCategory.PopularMovies">Popular Movies</option>
        <option value="@SearchCategory.TopRated">Top Rated</option>
        <option value="@SearchCategory.Upcoming">Coming Soon</option>
        <option value="@SearchCategory.NowPlaying">Now Playing</option>
    </select>
</div>

@code {
#region PARAMETERS
    [Parameter]
    public SearchCategory SelectedCategory { get; set; } = SearchCategory.None;

    [Parameter]
    public EventCallback<SearchCategory> OnCategorySelected { get; set; }
#endregion

    private string animationClass = string.Empty;

    #region ON CATEGORY CHANGED
    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        var stringValue = e.Value?.ToString() ?? string.Empty;
        if (Enum.TryParse<SearchCategory>(stringValue, out var parsedCategory))
        {
            SelectedCategory = parsedCategory;
            await OnCategorySelected.InvokeAsync(parsedCategory);
        }
        else
        {
            SelectedCategory = SearchCategory.None;
            await OnCategorySelected.InvokeAsync(SearchCategory.None);
        }
    }
#endregion

    #region DROPDOWN RESET
    public async void ResetDropdown()
    {
        // Trigger animation
        animationClass = "fade-out";
        StateHasChanged(); // Update UI with the animation class

        await Task.Delay(300); // Wait for the fade-out animation to complete

        SelectedCategory = SearchCategory.None;
        await OnCategorySelected.InvokeAsync(SearchCategory.None);
        animationClass = "fade-in"; // Trigger fade-in effect
        StateHasChanged();

        await Task.Delay(300); // Allow the fade-in animation to complete
        animationClass = string.Empty; // Remove animation class after reset
        StateHasChanged();
    }
    #endregion
}

