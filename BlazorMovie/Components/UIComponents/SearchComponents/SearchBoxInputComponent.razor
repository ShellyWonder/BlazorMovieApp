@* SearchBoxInputComponent *@

@using BlazorMovie.Components.UIComponents.UtilityComponents

<div class="input-group">
    <input type="text" class="form-control border border-bottom border-top"
                        placeholder="@Placeholder"
                        value="@searchQuery"
                        @oninput="OnSearchQueryChanged"
                       @onkeyup="HandleKeyUp" />
    <button class="btn btn-primary" type="submit" @onclick="SearchMoviesByTitle">Search</button>
    <button class="btn btn-danger border border-2" @onclick="OnClearSearchClick">Clear Search</button>
</div>

<ErrorMessageComponent Message="@errorMessage" />

@code {
    #region PARAMETERS
    [Parameter]
    public string Placeholder { get; set; } = "Enter Search Term";

    [Parameter]
    public string searchQuery { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    [Parameter]
    public EventCallback OnClearSearch { get; set; }

    [Parameter]
    public EventCallback<string> SearchQueryChanged { get; set; }
    #endregion

    // Controls input group visibility
    private bool isVisible = true;

    private string errorMessage { get; set; } = string.Empty;

    private DropdownComponent? dropdownComponent;

    #region SEARCH BY TITLE
    private async Task SearchMoviesByTitle()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            errorMessage = "Please enter a movie title to search.";
            return;
        }

        await OnSearch.InvokeAsync(searchQuery);
    }
    #endregion

    #region HANDLE KEY UP
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        Console.WriteLine($"Child searchQuery: {searchQuery}");
        if (e.Key == "Enter")
        {
            await SearchMoviesByTitle();
        }
    }
    #endregion
    #region SEARCH QUERY CHANGED
    private async Task OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        await SearchQueryChanged.InvokeAsync(searchQuery); // Notify parent
    }
    #endregion

    #region CLEAR SEARCH
    private async Task OnClearSearchClick()
    {
        searchQuery = string.Empty;
        // Hide the input group
        isVisible = false;
        await OnClearSearch.InvokeAsync();
        ResetDropdownComponent();
    }
    #endregion

    #region RESET DROPDOWN
    private void ResetDropdownComponent()
    {
        dropdownComponent?.ResetDropdown();
    }

    #endregion

}   
