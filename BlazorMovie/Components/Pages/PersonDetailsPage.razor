﻿@* PersonDetailsPage *@
@page "/person/{PersonId:int}"
@using BlazorMovie.Components.UIComponents.PersonPropertyComponents
@using BlazorMovie.Models.Dtos
@using BlazorMovie.Services
@using BlazorMovie.Services.Interfaces
@using BlazorMovie.Models.Credits

@inject IPersonService _personService
@inject ICreditService _creditService
@inject INavigationService _navService

@if (isLoading)
{
    <p>Loading...</p>
}
@* else if (IsNoInformationAvailable())
{
    <div class="alert alert-warning text-center mt-4">
        <h4>No information is available about @PersonDetails?.Name.</h4>
    </div>
} *@
else
{
    <div class="hero-bg" style="@($"--bg-img:url(https://image.tmdb.org/t/p/original/{PersonDetails?.ProfilePath})")">
        <div class="hero-container-xxl d-flex flex-column flex-md-row align-items-center text-white position-relative">

            <!-- Foreground Profile Picture -->
            <PersonProfileImageComponent ProfilePath="@PersonDetails?.ProfilePath" AltText="@PersonDetails?.Name" />

            <div class="col-md-8 pt-3 ps-3 ms-auto text-end">
                <h1 class="display-5 fw-bold">
                    <i class="bi bi-camera-reels text-danger"></i> @PersonDetails?.Name
                </h1>
                <PersonAKAComponent AKA="@PersonDetails?.AKA" />

                <PersonDepartmentComponent Department="@PersonDetails?.KnownForDepartment" />

                <PersonBirthdateComponent Birthdate="PersonDetails?.Birthdate" />

                <PersonDeathDateComponent Deathdate="PersonDetails?.Deathdate" />

                <PersonBirthplaceComponent Birthplace="@PersonDetails?.Birthplace" />

            </div>
        </div>
    </div>
        <PersonBiographyComponent Biography="@PersonDetails?.Biography" />
}
@if (MovieCredits?.Results != null && MovieCredits.Results.Any())
{
    <MovieListComponent TMovie="MovieCastDto" 
    Title="@($"{PersonDetails?.Name} Movies")" 
    movies="@MovieCredits" 
    OnPageChanged="@LoadPersonMoviesPage" />
}
else
{
    <p>Loading movies...</p>
}

@code {
    [Parameter]
    public int PersonId { get; set; }

    [Parameter]
    public string? PersonName { get; set; }

    private PersonDetails? PersonDetails{ get; set; }
    private PageResponse<MovieCastDto>? MovieCredits;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true; // Set loading to true before fetching data
        try
        {
            // Single call that returns both PersonDetails + MovieCredits
            var personWithCredits = await _creditService.GetPersonDetailsWithCredits(PersonId, page: 1);

            // Optional logging/diagnostics
            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(personWithCredits));

            // Assign the returned data directly
            PersonDetails = personWithCredits.PersonDetails;
            MovieCredits = personWithCredits.MovieCredits;

            // Normal checks/logging
            if (PersonDetails == null)
            {
                Console.WriteLine("Failed to load person details.");
            }
            else
            {
                // Using your custom NavService to update the URL:
                _navService.UpdateUrlWithName("/person", PersonId, PersonDetails.Name);
            }

            if (MovieCredits == null)
            {
                Console.WriteLine("Failed to load movie credits.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading person details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPersonMoviesPage(int page)
    {
        try
        {

            MovieCredits = await _creditService.GetMoviesByPersonIdAsync(PersonId, page);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching person details: {ex.Message}");

        }
    }

    // private bool IsNoInformationAvailable()
    // {
    //     if (PersonDetails == null)
    //         return true; // If data is null even after loading, show the message

    //     return string.IsNullOrWhiteSpace(PersonDetails?.Biography) || PersonDetails.Biography == "N/A"
    //         && string.IsNullOrWhiteSpace(PersonDetails.Birthplace) || PersonDetails.Birthplace == "N/A"
    //         && string.IsNullOrWhiteSpace(PersonDetails.Birthdate?.ToString("MMMM dd, yyyy") ?? "N/A")
    //         && string.IsNullOrWhiteSpace(PersonDetails.Deathdate?.ToString("MMMM dd, yyyy") ?? "N/A");
    // }
}