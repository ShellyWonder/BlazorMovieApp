﻿@* PersonDetailsPage *@
@page "/person/{PersonId:int}"
@using BlazorMovie.Services.Interfaces
@using BlazorMovie.Models.Credits


@inject IPersonService _personService
@inject ICreditService _creditService


@if (PersonDetails != null)
{
    <div class="hero-bg" style="@($"--bg-img:url(https://image.tmdb.org/t/p/original/{PersonDetails.ProfilePath})")">
        <div class="hero-container-xxl d-flex flex-column flex-md-row">
            <div class="col-md-8 pt-2 ps-2">
                <h1 class="display-6">
                    <span class="text-danger">
                        <i class="bi bi-camera-reels"></i>
                    </span>
                    @PersonDetails?.Name
                </h1>
                <p>
                    <strong>AKA:</strong>
                    @GetFilteredAKAs(PersonDetails?.AKA)
                </p>
                <p><strong>Birthdate:</strong> @(PersonDetails?.Birthdate?.ToString("MM-dd-yyyy") ?? "N/A")</p>
                @if (PersonDetails?.Deathdate != null)
                {
                    <p><strong>Deathdate:</strong> @PersonDetails.Deathdate?.ToString("MM-dd-yyyy")</p>
                }
                <p>
                    <strong>Birthplace:</strong> @(string.IsNullOrEmpty(PersonDetails?.Birthplace)
                    ? "N/A"
                    : PersonDetails.Birthplace)
                </p>
            </div>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(PersonDetails?.Biography))
    {
        <div class="container mt-4">
            <h3>Biography</h3>
            <p class="text-muted text-justify">
                @(ShowFullBio
                    ? PersonDetails.Biography
                    : PersonDetails.Biography.Substring(0, Math.Min(300, PersonDetails.Biography.Length)) + "...")
            </p>
            @if (PersonDetails.Biography.Length > 300)
            {
                <button class="btn btn-link p-0" @onclick="ToggleBiography">
                    @(ShowFullBio ? "Read Less" : "Read More")
                </button>
            }
        </div>
    }
}
@if (MovieCredits?.Results != null && MovieCredits.Results.Any())
{
    <MovieListComponent TMovie="MovieWithCharacter" movies="@MovieCredits" OnPageChanged="@LoadPersonMoviesPage" />
}
else
{
    <p>Loading person details...</p>
}
@code {
    [Parameter]
    public int PersonId { get; set; }

    private PersonDetails? PersonDetails{ get; set; }
    private PageResponse<MovieWithCharacter>? MovieCredits;
    private bool ShowFullBio = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //capturing the Task objects<PersonDetails> and <Credit>
            var personTask = _personService.GetPersonDetails(PersonId); 
            var creditsTask = _creditService.GetMoviesByPersonIdAsync(PersonId);

            //NOTE: Task.WhenAll ensures the tasks run concurrently.
            // wait for both tasks to complete
            await Task.WhenAll(personTask, creditsTask);

            // retrieves the result of the already-completed tasks &  assigns them to the respective properties
            // i.e. unwrap Task<personDetails> and Task<Credit> converting to PersonDetails and MovieCredits
            PersonDetails = await personTask;
            MovieCredits = await creditsTask;



            if (PersonDetails == null) Console.WriteLine("Failed to load person details.");

            if (MovieCredits == null) Console.WriteLine("Failed to load movie credits.");

        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error loading person details: {ex.Message}");
        }
    }

    private async Task LoadPersonMoviesPage(int page)
    {
        MovieCredits = await _creditService.GetMoviesByPersonIdAsync(PersonId, page);
    }


    private string GetFilteredAKAs(string[]? aliases)
    {
        if (aliases == null || aliases.Length == 0) return "N/A";

        // Basic regex to filter names containing only English letters and spaces
        var englishAliases = aliases.Where(alias => System.Text.RegularExpressions.Regex.IsMatch(alias, @"^[a-zA-Z\s]+$"));

        return englishAliases.Any() ? string.Join(", ", englishAliases) : "N/A";
    }

    private void ToggleBiography()
    {
        ShowFullBio = !ShowFullBio;
        InvokeAsync(StateHasChanged);//triggers UI re-render
    }
}