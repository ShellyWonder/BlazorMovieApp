@* PersonDetailsPage *@
@page "/person/{PersonId:int}"
@using BlazorMovie.Services.Interfaces
@using BlazorMovie.Models.Credits


@inject IPersonService _personService
@inject CacheService _cacheService

<h3>@PersonDetails?.Name</h3>
@if (PersonDetails is not null)
{
    <p>
        <strong>AKA:</strong>
        @GetFilteredAKAs(PersonDetails.AKA)
    </p>
    <p><strong>Birthdate:</strong> @(PersonDetails.Birthdate?.ToString("yyyy-MM-dd") ?? "N/A")</p>
    @if (PersonDetails.Deathdate != null)
    {
        <p><strong>Deathdate:</strong> @PersonDetails.Deathdate?.ToString("yyyy-MM-dd")</p>
    }
    <p>
        <strong>Birthplace:</strong> @(string.IsNullOrEmpty(PersonDetails.Birthplace)
    ? "N/A"
    : PersonDetails.Birthplace)
    </p>
    <p><strong>Biography:</strong> @PersonDetails.Biography</p>
}
else
{
    <p>Loading person details...</p>
}

@code {
    [Parameter]
    public int PersonId { get; set; }

    private PersonDetails? PersonDetails;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PersonDetails = await _personService.GetPersonDetails(PersonId);

            if (PersonDetails == null)
            {
                Console.WriteLine("Failed to load person details.");
            }
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Error loading person details: {ex.Message}");
        }
    }

   
    private string GetFilteredAKAs(string[]? aliases)
    {
        if (aliases == null || aliases.Length == 0)
        {
            return "N/A";
        }

        // Basic regex to filter names containing only English letters and spaces
        var englishAliases = aliases.Where(alias => System.Text.RegularExpressions.Regex.IsMatch(alias, @"^[a-zA-Z\s]+$"));

        return englishAliases.Any() ? string.Join(", ", englishAliases) : "N/A";
    }

}
