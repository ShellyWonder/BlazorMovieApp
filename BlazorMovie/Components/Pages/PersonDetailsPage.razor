﻿@* PersonDetailsPage *@
@page "/person/{PersonId:int}"
@using BlazorMovie.Components.UIComponents.PropertyComponents
@using BlazorMovie.Services.Interfaces
@using BlazorMovie.Models.Credits

@inject IPersonService _personService
@inject ICreditService _creditService


@if (isLoading)
{
    <p>Loading...</p>
}
else if (IsNoInformationAvailable())
{
    <div class="alert alert-warning text-center mt-4">
        <h4>No information is available about @PersonDetails?.Name.</h4>
    </div>
}
else
{
    <div class="hero-bg" style="@($"--bg-img:url(https://image.tmdb.org/t/p/original/{PersonDetails?.ProfilePath})")">
        <div class="hero-container-xxl d-flex flex-column flex-md-row align-items-center text-white position-relative">

            <!-- Foreground Profile Picture -->
            <div class="profile-img-container">
                <img class="profile-img" src="@($"https://image.tmdb.org/t/p/w300/{PersonDetails?.ProfilePath}")" alt="@PersonDetails?.Name">
            </div>

            <div class="col-md-8 pt-3 ps-3 ms-auto text-end">
                <h1 class="display-5 fw-bold">
                    <i class="bi bi-camera-reels text-danger"></i> @PersonDetails?.Name
                </h1>

                <PersonAKAComponent AKA="@PersonDetails?.AKA" />

                <p><strong>Birthdate:</strong> @(PersonDetails?.Birthdate?.ToString("MMMM dd, yyyy") ?? "N/A")</p>
                @if (PersonDetails?.Deathdate != null)
                {
                    <p><strong>Deathdate:</strong> @PersonDetails.Deathdate?.ToString("MMMM dd, yyyy")</p>
                }
                <p><strong>Birthplace:</strong> @(string.IsNullOrEmpty(PersonDetails?.Birthplace) ? "N/A" : PersonDetails.Birthplace)</p>

            </div>
        </div>
    </div>

    @if (PersonDetails != null && !string.IsNullOrEmpty(PersonDetails?.Biography))
    {
        <PersonBiographyComponent Biography="@PersonDetails?.Biography" />
    }
    else
    {
        <p>Loading biography...</p>
    }
}
@if (MovieCredits?.Results != null && MovieCredits.Results.Any())
{
    <MovieListComponent TMovie="MovieWithCharacter" 
    Title="@($"{PersonDetails?.Name} Movies")" 
    movies="@MovieCredits" 
    OnPageChanged="@LoadPersonMoviesPage" />
}
else
{
    <p>Loading movies...</p>
}
@code {
    [Parameter]
    public int PersonId { get; set; }
    private PersonDetails? PersonDetails{ get; set; }
    private PageResponse<MovieWithCharacter>? MovieCredits;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true; // Set loading to true before fetching data
        try
        {
            //capturing the Task objects<PersonDetails> and <Credit>
            var personTask = _personService.GetPersonDetails(PersonId); 
            var creditsTask = _creditService.GetMoviesByPersonIdAsync(PersonId);

            //NOTE: Task.WhenAll ensures the tasks run concurrently.
            // wait for both tasks to complete
            await Task.WhenAll(personTask, creditsTask);

            // retrieves the result of the already-completed tasks &  assigns them to the respective properties
            // i.e. unwrap Task<personDetails> and Task<Credit> converting to PersonDetails and MovieCredits
            PersonDetails = await personTask;
            MovieCredits = await creditsTask;

            if (PersonDetails == null) Console.WriteLine("Failed to load person details.");

            if (MovieCredits == null) Console.WriteLine("Failed to load movie credits.");

        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error loading person details: {ex.Message}");
        }
        isLoading = false; // Mark loading as false when API call completes
        StateHasChanged(); // Ensure UI updates
    }

    private async Task LoadPersonMoviesPage(int page)
    {
        try
        {

            MovieCredits = await _creditService.GetMoviesByPersonIdAsync(PersonId, page);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching person details: {ex.Message}");

        }
    }

    private bool IsNoInformationAvailable()
    {
        if (PersonDetails == null)
            return true; // If data is null even after loading, show the message

        return string.IsNullOrWhiteSpace(PersonDetails?.Biography) || PersonDetails.Biography == "N/A"
            && string.IsNullOrWhiteSpace(PersonDetails.Birthplace) || PersonDetails.Birthplace == "N/A"
            && string.IsNullOrWhiteSpace(PersonDetails.Birthdate?.ToString("MMMM dd, yyyy") ?? "N/A")
            && string.IsNullOrWhiteSpace(PersonDetails.Deathdate?.ToString("MMMM dd, yyyy") ?? "N/A");
    }
    
}