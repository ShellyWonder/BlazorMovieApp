@page "/now_playing"

@using System.Text.Json
@using BlazorMovie.Services
@using BlazorMovie.Models
@using BlazorMovie.Models.Interfaces

@inject TMDBClient TMDB
@inject NavigationManager navManager
@inject INowPlayingMovieService NowPlayingService
@inject IJSRuntime JSRuntime

<MovieListComponent TMovie="NowPlaying" movies="@movies" Title="Playing Now" OnPageChanged="GetPage" />


@code {
    private NowPlayingPageResponse? movies;

    [Parameter]
    public string? Title { get; set; } = "Movies Playing Now";

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    protected override async Task OnParametersSetAsync()
    {
        // Check if data is already in sessionStorage
        var cachedMoviesJson = await JSRuntime.InvokeAsync<string>("sessionStorageHelper.getItem", $"nowPlayingPage{Page}");

        if (string.IsNullOrEmpty(cachedMoviesJson))
        {
            // No cached data, make the API call
            movies = await NowPlayingService.GetMoviesAsync(Page);

            // Store the API response in sessionStorage for future use
            if (movies != null)
            {
                // Serialize the entire PageResponse<PopularMovie> object to JSON and store it
                var moviesJson = JsonSerializer.Serialize(movies);
                await JSRuntime.InvokeVoidAsync("sessionStorageHelper.setItem", $"nowPlayingPage{Page}", movies);
            }
        }
        else
        {
            // Data exists, deserialize the cached data
            movies = JsonSerializer.Deserialize<NowPlayingPageResponse?>(cachedMoviesJson);
        }
    }

 
    private void GetPage(int pageNum)
    {
        string url = navManager.GetUriWithQueryParameter("page", pageNum);
        navManager.NavigateTo(url);
    }
}