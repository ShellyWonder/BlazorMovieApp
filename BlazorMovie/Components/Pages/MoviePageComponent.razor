@page "/{category}"
@page "/"

@using BlazorMovie.Factories.Interfaces
@using BlazorMovie.Models
@using BlazorMovie.Services
@inject MovieCacheService MovieCacheService
@inject IMovieServiceFactory MovieServiceFactory
@inject NavigationManager navManager

<MovieListComponent TMovie="Movie"
                    movies="@movies"
                    Title="@Title"
                    OnPageChanged="GetPage" />

@code {
    private PageResponse<Movie>? movies;

    [Parameter]
    public string Category { get; set; } = "popular";

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    public string Title => Category switch
    {
        "now_playing" => "Now Playing",
        "upcoming" => "Coming Soon",
        "top_rated"=> "Top Rated",
        _ => "Popular Movies"
    };

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"From Movie Page: Category: {Category}, Page: {Page}");
        // Pull service in by category 
        var movieService = MovieServiceFactory.GetService(Category);
        //check if json response is available from sessionStorage; if so, display on UI
        movies = await MovieCacheService.GetOrFetchMoviesAsync(
            //if not, call API, display to UI and send to sessionStorage
            movieService.GetMoviesAsync,
            $"{Category}Page",
            Page
        );
    }

    private void GetPage(int pageNum)
    {
        string url = navManager.GetUriWithQueryParameter("page", pageNum);
        navManager.NavigateTo(url);
    }
}
