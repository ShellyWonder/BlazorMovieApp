@*MOVIE PAGE COMPONENT*@
@page "/{category}"
@page "/"
@page "/search"

@using BlazorMovie.Factories.Interfaces
@using BlazorMovie.Models
@using BlazorMovie.Services
@using BlazorMovie.Services.Interfaces
@using System.Web;

@inject CacheService cacheService
@inject IMovieServiceFactory movieServiceFactory
@inject ISearchMovieService searchMovieService
@inject NavigationManager navManager

<MovieListComponent TMovie="Movie"
movies="@movies"
Title="@Title"
OnPageChanged="GetPage" />


@code {
    private PageResponse<Movie>? movies;
    private int CurrentPage { get; set; } = 1;

    #region PARAMETERS
    [Parameter]
    public string Category { get; set; } = "popular";

    [SupplyParameterFromQuery]
    public string? Query { get; set; }

    [SupplyParameterFromQuery]
    public string SearchQuery { get; set; } = string.Empty;

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;
    #endregion

    #region CATEGORY SWITCH FOR TITLE
    public string Title => Category switch
    {
        "now_playing" => "Now Playing",
        "upcoming" => "Coming Soon",
        "top_rated" => "Top Rated",
        "search_result" => "Search Results",
        _ => "Popular Movies"
    };
    #endregion

    #region ON INITIALIZED
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Query))
        {
            movies = await searchMovieService.GetMoviesAsync(Page, SearchQuery);
        }
            var uri = new Uri(navManager.Uri); // navManager is the injected NavigationManager
        var queryString = uri.Query;

        // Use System.Web.HttpUtility to parse the query string
        var queryParameters = HttpUtility.ParseQueryString(queryString);
        var searchQuery = queryParameters["searchQuery"];

        // Use searchQuery
        Console.WriteLine($"SearchQuery: {SearchQuery}, Page: {Page}");

    }
    #endregion

    #region ON PARAMETERS SET ASYNC
    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"From Movie Page: Category: {Category}, Page: {Page}, SearchQuery: {SearchQuery}");

        if (Category == "search_result")
        {
            if (string.IsNullOrWhiteSpace(SearchQuery))
            {
                Console.WriteLine("Error: SearchQuery is empty!");
                return; // Prevent execution if the query is invalid
            }

            var searchMovieService = movieServiceFactory.GetService("search_result");
            movies = await FetchMoviesAsync(searchMovieService, Page);
        }
        else
        {
            var movieService = movieServiceFactory.GetService(Category);
            movies = await FetchMoviesAsync(movieService, Page);
        }
    }

    #endregion

    #region FETCH MOVIES
    private async Task<PageResponse<Movie>?> FetchMoviesAsync(IBaseMovieService movieService, int page)
    {
        if (movieService is ISearchMovieService searchMovieService)
        {
            // Include SearchQuery in the cache key to differentiate search results
            string cacheKey = $"{Category}Page_{SearchQuery}_{page}";

            return await cacheService.GetOrFetchAsync(
                (p) => searchMovieService.GetMoviesAsync(p, SearchQuery),
                // $"{Category}Page",
                cacheKey,
                page
            );
        }
        else if (movieService is IMovieService generalMovieService)
        {
            //First, check if response is already cashed
            return await cacheService.GetOrFetchAsync(
                //If not, make API call and cashe the response
                (p) => generalMovieService.GetMoviesAsync(p),
                $"{Category}Page",
                page
            );
        }


        throw new InvalidOperationException("Unsupported movie service type.");
    }
    #endregion

    #region GET PAGE
    private void GetPage(int pageNum)
    {
        string url = navManager.GetUriWithQueryParameter("page", pageNum);
        navManager.NavigateTo(url);
    }
    #endregion

}
